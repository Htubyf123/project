/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Links;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinksRecord extends UpdatableRecordImpl<LinksRecord> implements Record3<Integer, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.links.link_id</code>.
     */
    public void setLinkId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.links.link_id</code>.
     */
    public Integer getLinkId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.links.url</code>.
     */
    public void setUrl(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.links.url</code>.
     */
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.links.checked_at</code>.
     */
    public void setCheckedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.links.checked_at</code>.
     */
    public LocalDateTime getCheckedAt() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Links.LINKS.LINK_ID;
    }

    @Override
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Links.LINKS.CHECKED_AT;
    }

    @Override
    public Integer component1() {
        return getLinkId();
    }

    @Override
    public String component2() {
        return getUrl();
    }

    @Override
    public LocalDateTime component3() {
        return getCheckedAt();
    }

    @Override
    public Integer value1() {
        return getLinkId();
    }

    @Override
    public String value2() {
        return getUrl();
    }

    @Override
    public LocalDateTime value3() {
        return getCheckedAt();
    }

    @Override
    public LinksRecord value1(Integer value) {
        setLinkId(value);
        return this;
    }

    @Override
    public LinksRecord value2(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public LinksRecord value3(LocalDateTime value) {
        setCheckedAt(value);
        return this;
    }

    @Override
    public LinksRecord values(Integer value1, String value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(Integer linkId, String url, LocalDateTime checkedAt) {
        super(Links.LINKS);

        setLinkId(linkId);
        setUrl(url);
        setCheckedAt(checkedAt);
    }
}
